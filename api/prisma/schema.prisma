// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prize {
  id            Int       @default(autoincrement()) @id
  name          String
  description   String
  image_url     String
  createdAt     DateTime  @default(now())
  deleteAt      DateTime?

  steps         Step[]
}

model User {
  id              Int       @default(autoincrement()) @id
  email           String    @unique
  firstname       String
  lastname        String
  password        String
  balance         Float     @default(0)
  birthdate       DateTime
  referralCode    String    @default(uuid())
  referrerCode    String?
  createdAt       DateTime  @default(now())
  deleteAt        DateTime?

  wonContests     Contest[]
  transactions    Transaction[]
  partOfContests  PartsOfContests[]

  referrals  Referring[] @relation("RefersTo")
  referrers  Referring[] @relation("ReferredBy")
}

model Contest {
  id            Int       @default(autoincrement()) @id
  name          String    @unique
  description   String
  startAt       DateTime
  endAt         DateTime
  price         Float
  winner        User?     @relation(fields: [winnerId], references: [id])
  winnerId      Int?
  createdAt     DateTime  @default(now())
  deleteAt      DateTime?

  steps         Step[]
  participants  PartsOfContests[]
}

model Step {
  id        Int     @default(autoincrement()) @id
  contest   Contest @relation(fields: [contestId], references: [id])
  contestId Int
  prize     Prize   @relation(fields: [prizeId], references: [id])
  prizeId   Int
  threshold Int
}

model PartsOfContests {
  id        Int     @default(autoincrement()) @id
  contest   Contest @relation(fields: [contestId], references: [id])
  contestId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  
  createdAt     DateTime  @default(now())
  deleteAt      DateTime?
}

model Transaction {
  id        Int     @default(autoincrement()) @id
  orderId   String
  status    String
  amount    Float     @default(0)
  createdAt     DateTime  @default(now())
  deleteAt      DateTime?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Referring {
  id          Int     @id @default(autoincrement())
  referralId  Int
  referrerId  Int
  createdAt   DateTime @default(now())
  referral User @relation("RefersTo", fields: [referralId], references: [id])
  referrer User @relation("ReferredBy", fields: [referrerId], references: [id])

  @@unique([referralId, referrerId])
}
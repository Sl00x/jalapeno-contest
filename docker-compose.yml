services:
  frontend:
    build: ./frontend
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    volumes:
      - ./frontend:/app
    restart: always

  database:
    image: postgres:17.4-alpine
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_HOST: ${DATABASE_HOST}
      POSTGRES_PORT: ${DATABASE_PORT}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_DB}
    volumes:
      - database:/var/lib/postgresql/data

  adminer:
    image: adminer:5
    restart: always
    ports:
      - 3334:8080
    depends_on:
      - database

  backend:
    privileged: true
    build: ./backend
    restart: always
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy

  nginx:
    build: ./nginx
    restart: always
    ports:
      - "3333:80"
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/conf.d/proxy.conf:ro
    depends_on:
      - frontend
      - backend

volumes:
  database:
    driver: local

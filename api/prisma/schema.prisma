// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prize {
  id            Int       @default(autoincrement()) @id
  name          String
  description   String
  image_url     String
  createdAt     DateTime  @default(now())
  deleteAt      DateTime?

  steps         Step[]
}

model User {
  id              Int       @default(autoincrement()) @id
  email           String    @unique
  firstname       String
  lastname        String
  password        String
  balance         Float     @default(0)
  birthdate       DateTime
  referralCode    String    @default(uuid())
  referrerId      Int?
  referrer        User?     @relation(name: "refferal", fields: [referrerId], references: [id])
  createdAt       DateTime  @default(now())
  deleteAt        DateTime?

  referrals             User[]    @relation(name: "refferal")
  wonContestStates      ContestState[]
  transactions          Transaction[]
  partOfContests        PartsOfContests[]
  contests              Contest[]
}

model Contest {
  id              Int         @default(autoincrement()) @id
  name            String      @unique
  description     String
  startAt         DateTime
  endAt           DateTime
  price           Float
  ownerId         Int?
  owner           User?       @relation(fields: [ownerId], references: [id])
  createdAt       DateTime    @default(now())
  deleteAt        DateTime?

  contestState    ContestState?
  steps           Step[]
  participants    PartsOfContests[]
}

model Step {
  id        Int     @default(autoincrement()) @id
  contest   Contest @relation(fields: [contestId], references: [id])
  contestId Int
  prize     Prize   @relation(fields: [prizeId], references: [id])
  prizeId   Int
  threshold Int
}

model PartsOfContests {
  id        Int       @default(autoincrement()) @id
  contest   Contest   @relation(fields: [contestId], references: [id])
  contestId Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  
  createdAt DateTime  @default(now())
  deleteAt  DateTime?
}

model Transaction {
  id        Int       @default(autoincrement()) @id
  orderId   String
  status    String
  amount    Float     @default(0)
  createdAt DateTime  @default(now())
  deleteAt  DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
}

model ContestState {
  id            Int       @default(autoincrement()) @id
  contest       Contest   @relation(fields: [contestId], references: [id])
  contestId     Int       @unique
  winner        User?     @relation(fields: [winnerId], references: [id])
  winnerId      Int?
  state         State     @default(WAITING)
  createdAt     DateTime  @default(now())
  deleteAt      DateTime?
}

enum State {
  WAITING
  SHIPPING
  RECEIVED
  VALIDATED
}